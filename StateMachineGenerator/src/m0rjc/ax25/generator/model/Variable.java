package m0rjc.ax25.generator.model;

import java.util.ArrayList;
import java.util.List;

import m0rjc.ax25.generator.visitor.IModelVisitor;

/**
 * A variable used or accessed by the state machine
 */
public class Variable
{
	public static Variable accessVariable(String name)
	{
		return accessVariable(name, 1);
	}
	
	public static Variable accessVariable(String name, int size)
	{
		return new Variable(name, Access.ACCESS_BANK, 0, size);
	}
	
	public static Variable pagedVariable(String name, int page)
	{
		return pagedVariable(page, name, 1);
	}
	
	public static Variable pagedVariable(int page, String name, int size)
	{
		return new Variable(name, Access.PAGED_BANK, page, size);
	}
	
	private Variable(String name, Access access, int bank, int size)
	{
		super();
		m_name = name;
		m_access = access;
		m_bank = bank;
		m_size = size;
	}
	
	public enum Access
	{
		ACCESS_BANK,
		PAGED_BANK;
	}
	
	private String m_name;
	private Access m_access;
	private int m_bank;
	private int m_size;
	private List<String> m_flags = new ArrayList<String>();
	
	/* Hash code method generated by Eclipse */
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((m_access == null) ? 0 : m_access.hashCode());
		result = prime * result + m_bank;
		result = prime * result + ((m_name == null) ? 0 : m_name.hashCode());
		result = prime * result + m_size;
		return result;
	}

	/* Equals method generated by Eclipse */
	@Override
	public boolean equals(Object obj)
	{
		if(this == obj)
			return true;
		if(obj == null)
			return false;
		if(getClass() != obj.getClass())
			return false;
		Variable other = (Variable) obj;
		if(m_access != other.m_access)
			return false;
		if(m_bank != other.m_bank)
			return false;
		if(m_name == null)
		{
			if(other.m_name != null)
				return false;
		}
		else if(!m_name.equals(other.m_name))
			return false;
		if(m_size != other.m_size)
			return false;
		return true;
	}

	/**
	 * The variable name
	 */
	public String getName()
	{
		return m_name;
	}

	/**
	 * Bytes to allocate for this variable
	 */
	public int getSize()
	{
		return m_size;
	}
	
	/**
	 * Declare a flag.
	 * The variable will grow in size for every 8 flags added.
	 * @param name
	 * @return
	 */
	public Variable addFlag(String name)
	{
		m_flags.add(name);
		while(m_flags.size() /8 >= m_size) m_size++;
		return this;
	}

	/**
	 * Return the bit for the given flag.
	 * First byte has bits 0 to 7.
	 * Second byte has bits 8 to 15.
	 * @param gpsFlagGpsNewTime
	 * @return
	 */
	public int getBit(String name)
	{
		int result = m_flags.indexOf(name);
		if(result < 0) throw new IllegalArgumentException("Flag " + name + " not defined for " + m_name);
		return result;
	}

	/**
	 * Define myself to the visitor
	 * @param visitor
	 */
	void accept(IModelVisitor visitor)
	{
		visitor.visitCreateVariableDefinition(getName(), getSize());
		int i = 0;
		for(String flag : m_flags)
		{
			visitor.visitCreateFlagDefinition(flag, i);
			i++;
		}
	}
	
}
