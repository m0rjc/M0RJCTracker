package m0rjc.ax25.generator.diagramBuilder;

import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;

import m0rjc.ax25.generator.model.Node;
import m0rjc.ax25.generator.model.Transition;
import m0rjc.ax25.generator.model.Variable;
import m0rjc.ax25.generator.visitor.IModelVisitor;

/**
 * Output a Graphviz diagram file from the model
 * 
 * @author Richard Corfield
 */
public class DiagramBuilder implements IModelVisitor
{
	private PrintWriter m_output;

	private String m_startNodeDef;
	private List<String> m_nodeDefs = new LinkedList<String>();
	private List<String> m_endNodeDefs = new LinkedList<String>();
	private List<String> m_transitionDefs = new LinkedList<String>();
	
	private StringBuilder m_currentTransition;
	private boolean m_currentHasConditions;
	
	private String m_currentNode;
	
	public DiagramBuilder(PrintWriter output)
	{
		m_output = output;
		
		output.println("// Graphviz representation of a state model.");
		output.println("// This file is automatically generated by the State Machine Generator.");
		output.println("digraph finite_state_machine {");
		output.println("        rankdir=LR;");
	}
	

	/**
	 * @see m0rjc.ax25.generator.visitor.IModelVisitor#startNode(m0rjc.ax25.generator.model.Node)
	 */
	@Override
	public void startNode(Node node)
	{
		m_currentNode = node.getStateName();
		if(m_startNodeDef == null)
		{
			renderStartNode(node);
		}
		else if(!node.hasTransitions())
		{
			renderEndNode(node);
		}
		else
		{
			renderNode(node);
		}
	}

	/**
	 * @param node
	 */
	private void renderStartNode(Node node)
	{
		m_startNodeDef = String.format("%s;", node.getStateName());
	}

	/**
	 * @param node
	 */
	private void renderEndNode(Node node)
	{
		m_endNodeDefs.add(node.getStateName() + ";");
	}

	/**
	 * @param node
	 */
	private void renderNode(Node node)
	{
		m_nodeDefs.add(node.getStateName() + ";");
	}

	

	@Override
	public void visitTransition(Transition transition)
	{
		finishLastTransition();
		
		String target = transition.getTargetNodeName();
		m_currentTransition = new StringBuilder(String.format("    %s -> %s [ label = \"",
			m_currentNode, target));
	}


	private void finishLastTransition()
	{
		if(m_currentTransition != null)
		{
			m_currentTransition.append("\" ];");
			m_transitionDefs.add(m_currentTransition.toString());
			m_currentTransition = null;
			m_currentHasConditions = false;
		}
	}


	@Override
	public void visitTransitionPreconditionGE(Variable variable, int value)
	{
		if(m_currentHasConditions) m_currentTransition.append(", ");
		m_currentTransition.append(String.format("%s >= %s", variable.getName(), formatInput(value)));
		m_currentHasConditions = true;
	}


	@Override
	public void visitTransitionPreconditionEQ(Variable variable, int value)
	{
		if(m_currentHasConditions) m_currentTransition.append(", ");
		m_currentTransition.append(String.format("%s == %s", variable.getName(), formatInput(value)));
		m_currentHasConditions = true;
	}


	@Override
	public void visitTransitionPreconditionLE(Variable variable, int value)
	{
		if(m_currentHasConditions) m_currentTransition.append(", ");
		m_currentTransition.append(String.format("%s <= %s", variable.getName(), formatInput(value)));
		m_currentHasConditions = true;
	}

	@Override
	public void visitTransitionPreconditionFlag(Variable flags, int bit, boolean expectedValue)
	{
		if(m_currentHasConditions) m_currentTransition.append(", ");
		m_currentTransition.append(String.format("'%s[%d]' == %s", flags.getName(), bit, Boolean.toString(expectedValue)));
		m_currentHasConditions = true;
	}


	@Override
	public void visitTransitionGoToNode(String stateName)
	{
		// Nothing to do
	}

	
	
	@Override
	public void visitCommandCopyVariableToIndexedVariable(Variable source,
			Variable output, Variable indexer)
	{
		m_currentTransition.append("/store(" + source.getName() + " -> " + output.getName() + "[" + indexer.getName() + "])");
	}


	@Override
	public void visitCommandCopyVariable(Variable input, Variable output)
	{
		m_currentTransition.append("/store(" + input.getName() + " -> " + output.getName() + ")");
	}


	@Override
	public void visitCommandClearVariable(Variable variable)
	{
		m_currentTransition.append("/clear(" + variable.getName() + ")");
	}


	@Override
	public void visitCommandClearIndexedVariable(Variable variable,
			Variable indexer)
	{
		m_currentTransition.append("/clear(" + variable.getName() + "[" + indexer.getName() + "])");
	}


	@Override
	public void visitCommandIncrementVariable(Variable variable)
	{
		m_currentTransition.append("/increment(" + variable.getName() + ")");
	}


	@Override
	public void visitCommandSetFlag(Variable flags, int bit, boolean newValue)
	{
		m_currentTransition.append("/setFlag(" + flags.getName() + "[" + bit + "] := " + newValue + ")");
	}


	/**
	 * Format an input value for display
	 * @param inputValue
	 * @return
	 */
	private String formatInput(int inputValue)
	{
		if(inputValue >= 0x20 && inputValue <= 0x7E)
		{
			return Character.toString((char)inputValue);
		}
		return Integer.toString(inputValue);
	}
	
	/**
	 * @see m0rjc.ax25.generator.visitor.IModelVisitor#endNode(m0rjc.ax25.generator.model.Node)
	 */
	@Override
	public void endNode(Node node)
	{
		finishLastTransition();
	}

	/**
	 * On finish, write out the diagram
	 * @see m0rjc.ax25.generator.visitor.IModelVisitor#finished()
	 */
	@Override
	public void finished()
	{
		m_output.println("    node [shape = doublecircle, color=black, style=filled; fontcolor=white];");
		m_output.println(m_startNodeDef);
		
		m_output.println("    node [shape = rect, color=lightblue, style=filled; fontcolor=black];");
		for(String line : m_nodeDefs) m_output.println(line);

		m_output.println("    node [shape = circle, color=black, style=filled, fontcolor=white];");
		for(String line : m_endNodeDefs) m_output.println(line);
		
		for(String line : m_transitionDefs) m_output.println(line);
		m_output.println("}");
	}


	@Override
	public void visitDeclareExternalSymbol(String name)
	{
	}


	@Override
	public void visitDeclareGlobalSymbol(String name)
	{
	}


	@Override
	public void visitStartAccessVariables(boolean modelDefinesAccessVariables)
	{
	}


	@Override
	public void visitCreateVariableDefinition(String name, int size)
	{
	}


	@Override
	public void visitCreateFlagDefinition(String name, int bit)
	{
	}


	@Override
	public void visitStartBankedVariables(int bankNumber,
			boolean modelDefinesVariablesInThisBank)
	{
	}


	@Override
	public void visitStartCode()
	{
	}

	
	
	
}
